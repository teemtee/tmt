:tocdepth: 0

.. _/plugins/{{ STEP }}:

{{ STEP | capitalize }} Plugins
{{ '~' * (8 + (STEP | length)) }}

{% for PLUGIN_ID in REGISTRY.iter_plugin_ids() %}
    {% set method = REGISTRY.get_plugin(PLUGIN_ID) %}
    {% set PLUGIN = method.class_ %}

.. _plugins/{{ STEP }}/{{ PLUGIN_ID | strip }}:

{{ PLUGIN_ID }}
{{ '-' * (PLUGIN_ID | length)}}

{#
    TODO: once we start getting reviewed and polished plugins, drop the warning
    for those that would be done and ready. Probably with some temporary list
    to which we would add their names.
#}
.. warning::

    Please, be aware that the documentation below is a work in progress. We are
    working on fixing it, adding missing bits and generally making it better.
    Also, it was originaly used for command line help only, therefore the
    formatting is often suboptional.

{% if PLUGIN.__doc__ %}
{{ PLUGIN.__doc__ | dedent | strip }}
{% endif %}

Configuration
^^^^^^^^^^^^^

{% macro render_field(field_name) %}
    {% set _, option, _, metadata = container_field(PLUGIN._data_class, field_name) %}

    {% if metadata.metavar %}
{{ option }}: ``{{ metadata.metavar }}``
    {% elif metadata.default is boolean %}
{{ option }}: ``true|false``
    {% else %}
{{ option }}:
    {% endif %}
    {% if metadata.help %}
{{ metadata.help | strip | indent(4, first=true) }}
    {% endif %}
    {% if metadata.has_default %}
        {% set actual_default = metadata.materialized_default %}

        {% if actual_default is sequence and not actual_default %}
    **Default:** *empty list*
        {% elif actual_default %}
    **Default:** ``{{ metadata.default }}``
        {% else %}
    **Default:** *could not render default value correctly:* ``{{ metadata.default_factory }}`` ``{{ metadata.default }}`` ``{{ actual_default }}``
        {% endif %}
    {% endif %}
{%endmacro %}

{% set ignored_fields = container_ignored_fields(PLUGIN._data_class) %}
{% set inherited_fields = container_inherited_fields(PLUGIN._data_class) | sort %}
{% set intrinsic_fields = container_intrinsic_fields(PLUGIN._data_class) | sort %}

{% for field_name in intrinsic_fields %}
{{ render_field(field_name) }}
{% endfor %}

{% if inherited_fields %}
Common keys
"""""""""""

{% for field_name in inherited_fields %}
{{ render_field(field_name) }}
{% endfor %}
{% endif %}

{% if not loop.last %}
----
{% endif %}
{% endfor %}
