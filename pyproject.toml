[build-system]
# TODO https://github.com/astral-sh/uv/issues/3957 uncertain. Might need/want to use setuptools or hatchling
requires = ["uv_build>=0.7.3,<0.8.0", "setuptools-scm>=8"]
build-backend = "uv_build"

[project]
name = "tmt"
# TODO uv preview = no dynamic metadata
#dynamic = ["version"]
version = "0.0.0"
description = "Test Management Tool"
readme = "README.rst"
license = "MIT"
license-files = ["LICENSE"]
requires-python = ">=3.12"
authors = [
    { name = "Petr Splichal", email = "psplicha@redhat.com" },
    ]
maintainers = [
    { name = "Petr Splichal", email = "psplicha@redhat.com" },
    ]
keywords = [
    "metadata",
    "testing",
    ]
classifiers = [
    "Natural Language :: English",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Utilities",
    "Topic :: Software Development :: Testing",
    "Operating System :: POSIX :: Linux",
    ]
dependencies = [
    # Based on EPEL10
    "click>=8.1.7, <9",
    "docutils>=0.20.1",
    "fmf>=1.7.0",
    "jinja2>=3.1.5, <4",
    "packaging>=24.2",
    "pint>=0.24.4",
    "pydantic>=2.9.2, <3",
    "pygments>=2.18.0, <3",
    "requests>=2.32.3, <3",
    "ruamel.yaml>=0.18.5",  # TODO pulled by fmf
    "urllib3>=1.26.19, <3.0", # 2.* on Fedora
    "typing-extensions>=4.9.0; python_version < '3.13'",
    ]

[project.optional-dependencies]
ansible = [
    "ansible-core",
    ]
test-convert = [
    "html2text>=2024.2.26",  # TODO no epel10
    "markdown>=3.5.1, <4",
    "nitrate>=1.9.0",  # TODO no epel10
    "python-bugzilla>=3.3.0",
    ]
export-polarion = [
    "pylero>=0.1.0",  # TODO no epel10
    ]
provision-beaker = [
    "mrack>=1.23.2",  # TODO no epel10
    ]
provision-virtual = [
    "testcloud>=0.11.7",  # TODO no epel10
    ]
provision-container = []
provision-bootc = []
report-junit = [
    # Required to support XML parsing and checking the XSD schemas.
    "lxml>=5.2.1, <6",
    ]
report-polarion = [
    "tmt[report-junit]",
    "tmt[export-polarion]",
    ]
link-jira = [
    "jira>=3.8.0, <4",
    ]
all = [
    "tmt[test-convert]",
    "tmt[export-polarion]",
    "tmt[provision-container]",
    "tmt[provision-bootc]",
    "tmt[provision-virtual]",
    "tmt[provision-beaker]",
    "tmt[report-junit]",
    "tmt[report-polarion]",
    "tmt[link-jira]",
    ]
# Needed for readthedocs and man page build. Not being packaged in rpm.
docs = [
    "renku-sphinx-theme",
    "readthedocs-sphinx-ext",
    "docutils>=0.21.2",
    "Sphinx==8.2.3",
    "fmf>=1.7.0",
    ]

[project.scripts]
tmt = "tmt.__main__:run_cli"

[project.urls]
Homepage = "https://github.com/teemtee/tmt"

#[tool.setuptools_scm]
#version_scheme = "release-branch-semver"

#artifacts = ["tmt.1"]

[tool.uv]
preview = true
cache-keys = [{ file = "pyproject.toml" }, { git = { commit = true, tags = true } }]
build-backend.module-root = ""
build-backend.data = [
    "examples",
    "tmt.spec",
    "tmt.1",
    ".fmf",
    ]
build-backend.source-exclude = [
    "examples/symlinks/**",  # symlinks are not valid
]


[dependency-groups]
# dev is default uv group
dev = [
    "autopep8",
    "ruff",
    "mypy",
    "pytest",
    "python-coveralls",
    "pytest-container",
    "pytest-xdist",
    "requre",
    "yq",
    "pre-commit",
    # Do not install *types-click* - it's not recommended with Click 8 & newer
    "types-Markdown",
    "types-setuptools",
    "types-jsonschema",
    "types-urllib3",
    "types-jinja2",
    "types-babel",
    "types-docutils",
    "types-lxml",
    "tmt[all]",
    "poethepoet",
]
docs = [
    "tmt[docs]",
    "poethepoet",
]

[tool.poe]
executor = { type = "uv" }

[tool.poe.tasks]
# Defines various tasks that can be run with 'poe <task_name>'.

# === Testing Tasks ===
test = { cmd = "uv run -- pytest -vvv -ra --showlocals -n 0 tests/unit", help = "Run unit tests. Args are passed to pytest." }
smoke = { cmd = "uv run -- pytest -vvv -ra --showlocals -n 0 tests/unit/test_cli.py", help = "Run smoke tests. Args are passed to pytest." }
coverage = [
    # This is a sequence task to generate a test coverage report.
    { cmd = "uv run -- coverage run --source=tmt -m pytest -vvv -ra --showlocals -n 0 tests" },
    { cmd = "uv run -- coverage report" },
    { cmd = "uv run -- coverage annotate" },
]
requre = { shell = """
echo "Regenerating requre test data..."
(cd $POE_ROOT/tests/integration && \\
  uv run -- pytest -vvv -ra --showlocals -n 0 && \\
  uv run -- requre-patch purge --replaces :milestone_url:str:SomeText --replaces :latency:float:0 tests/integration/test_data/test_nitrate/*)
""", help = "Regenerate test data for integration tests" }

# === Documentation Tasks ===
docs = { cmd = "uv run --group docs -- sphinx-build -b html docs docs/_build", help = "Build HTML documentation. Extra args are passed to sphinx-build." }
linkcheck = { cmd = "uv run --group docs -- sphinx-build -b linkcheck docs docs/_build", help = "Run sphinx linkcheck. Extra args are passed to sphinx-build." }

_prepare_man_rst = { shell = """
cp $POE_ROOT/docs/header.txt $POE_ROOT/man.rst
tail -n+8 $POE_ROOT/docs/overview.rst >> $POE_ROOT/man.rst
sed '/versionadded::/d' -i $POE_ROOT/man.rst
find $POE_ROOT -name man.rst
""" }
_generate_man_page = { shell = "uv run --group docs -- rst2man $POE_ROOT/man.rst > $POE_ROOT/tmt.1" }
_cleanup_man_rst = { shell = "rm -f $POE_ROOT/man.rst" }
man = { sequence = ["_prepare_man_rst", "_generate_man_page", "_cleanup_man_rst"], help = "Build the man page" }

# === Building & Packaging Tasks ===
version = { cmd = "uv version --short", help = "Show project version" }
_build_sdist_wheel = { cmd = "uv build", help = "Build sdist and wheel (core command)" }
build = { sequence = ["clean", "man", "_build_sdist_wheel"], help = "Clean, build man page, then build project sdist and wheel" }

_tmp_sources_dir = { shell = "mkdir -p $POE_ROOT/tmp/SOURCES", help = "Create temporary directory for source tarballs" }
tarball = { sequence = ["build", "_tmp_sources_dir", { shell = "cp $POE_ROOT/dist/tmt-*.tar.gz $POE_ROOT/tmp/SOURCES/" }], help = "Create source tarball in tmp/SOURCES" }

ver2spec = { shell = """
PROJECT_VERSION=$(uv version --short)
echo "Updating tmt.spec with version $PROJECT_VERSION..."
sed -E "s/^(Version:[[:space:]]*).*/\\1$PROJECT_VERSION/" -i $POE_ROOT/tmt.spec
""", help = "Update tmt.spec with current project version" }

rpm = { deps = ["tarball", "ver2spec"], shell = "rpmbuild --define '_topdir $POE_ROOT/tmp' -bb $POE_ROOT/tmt.spec || echo 'Hint: run `poe build-deps` to install build dependencies'", help = "Build RPMs" }
srpm = { deps = ["tarball", "ver2spec"], shell = "rpmbuild --define '_topdir $POE_ROOT/tmp' -bs $POE_ROOT/tmt.spec", help = "Build SRPM" }
packages = { sequence = ["rpm", "srpm"], help = "Build RPM and SRPM packages" }

# === System Dependency Management Tasks ===
_deps = { shell = "sudo dnf install -y uv python3-devel rpm-build", help = "Install minimal system dependencies (sudo)" }
build-deps = { sequence = ["_deps", "tarball", "ver2spec", { shell = "rpmbuild --define '_topdir $POE_ROOT/tmp' -br $POE_ROOT/tmt.spec || sudo dnf builddep -y $POE_ROOT/tmp/SRPMS/tmt-*buildreqs.nosrc.rpm" }], help = "Install RPM build dependencies (sudo)" }
develop = { deps = ["_deps"], shell = "sudo dnf install -y expect gcc git python3-nitrate {libvirt,krb5,libpq,python3}-devel jq podman buildah /usr/bin/python3.12", help = "Install all development system dependencies (sudo)" }

# === Other Development Tasks ===
tags = { shell = "find $POE_ROOT/tmt -name '*.py' | xargs ctags --python-kinds=-i", help = "Generate ctags" }
nitrateconf = { shell = "test -e ~/.nitrate || echo -en '[nitrate]\\nurl = https://nitrate.server/xmlrpc/\\n' | tee ~/.nitrate", help = "Ensure ~/.nitrate configuration exists" }
all = { sequence = ["docs", "packages"], help = "Build documentation and packages" }

# === Cleanup Task ===
clean = { shell = """
echo "Cleaning up..."
rm -rf $POE_ROOT/tmp $POE_ROOT/build $POE_ROOT/dist $POE_ROOT/tmt.1 $POE_ROOT/man.rst
rm -rf $POE_ROOT/.cache $POE_ROOT/.mypy_cache $POE_ROOT/.ruff_cache $POE_ROOT/.pytest_cache $POE_ROOT/.coverage $POE_ROOT/.venv
find $POE_ROOT -type f -name "*.py[co]" -delete
find $POE_ROOT -type f -name "*,cover" -delete
find $POE_ROOT -type d -name "__pycache__" -delete
rm -rf $POE_ROOT/examples/convert/{main.fmf,test.md,Manual} $POE_ROOT/Manual
rm -f $POE_ROOT/tests/full/repo_copy.tgz
""", help = "Clean up temporary files, build artifacts, and .venv" }

# === Container Image Management Tasks ===
# Tasks for building and managing container images using a helper Python script.
# These tasks call functions in 'scripts/manage_containers.py'.
# TODO: finish manage_containers.py

build-distro = { script = "scripts.manage_containers:handle_build_action(group='distro')", help = "Build all main tmt container images (e.g., tmt, tmt-all)." }
build-test = { script = "scripts.manage_containers:handle_build_action(group='test')", help = "Build all tmt test container images." }
build-all = { script = "scripts.manage_containers:handle_build_action(group='all')", help = "Build all tmt distro and test container images." }
build-one = { script = "scripts.manage_containers:handle_build_action(key=key_arg)", help = "Build a single container image by its key. Usage: poe build-one key_arg=<image_key>", args = [{name = "key_arg", help="The unique key of the image to build (see script for keys)."}] }

pull-bases-distro = { script = "scripts.manage_containers:handle_pull_bases_action(group='distro')", help = "Pull/update base images for the main tmt container images." }
pull-bases-test = { script = "scripts.manage_containers:handle_pull_bases_action(group='test')", help = "Pull/update base images for the tmt test container images." }
pull-bases-all = { script = "scripts.manage_containers:handle_pull_bases_action(group='all')", help = "Pull/update base images for all container images." }

list-images = { script = "scripts.manage_containers:handle_list_images_action", help = "List available image configurations from the script." }
list-built-distro = { script = "scripts.manage_containers:handle_list_built_action(group='distro')", help = "List built tmt distro images using podman." }
list-built-tests = { script = "scripts.manage_containers:handle_list_built_action(group='test')", help = "List built tmt test images using podman." }


[tool.mypy]
# Be vewy, vewy stwict, we'we hunting wabbits^Wbugs.
strict = true

# Automagically make imported object part of mypy's view of module's namespace.
implicit_reexport = true

# Make error messages more rich, this helps better targeted waivers.
show_error_codes = true

# Allow mypy to follow imports to get correct picture of type
# annotations across module boundaries.
follow_imports = "normal"

python_version = "3.12"
files = ["tmt/"]

[[tool.mypy.overrides]]
module = [
    "bugzilla.*",
    "gssapi.*",
    "guestfs.*",
    "html2text.*",
    "fmf.*",
    "lxml.*",
    "libvirt.*",
    "nitrate.*",
    "pylero.*",
    "testcloud.*",
    "mrack.*",
    ]
ignore_missing_imports = true

[[tool.mypy.overrides]]
# Workaround for https://github.com/python/mypy/issues/12664
module = "ruamel.*"
cache_dir = "/dev/null"

[tool.pyright]
include = [
    "tmt/**/*.py",
]
ignore = [
    "docs/**",
    "examples/**",
    "tests/**",
    "tmt/_compat/pydantic.py",
    "tmt/export/*.py",
    "tmt/plugins/*.py",
    "tmt/steps/*.py",
    "tmt/steps/discover/*.py",
    "tmt/steps/execute/*.py",
    "tmt/steps/finish/*.py",
    "tmt/steps/prepare/feature/__init__.py",
    "tmt/steps/prepare/__init__.py",
    "tmt/steps/prepare/install.py",
    "tmt/steps/provision/*.py",
    "tmt/steps/report/__init__.py",
    "tmt/steps/report/polarion.py",
    "tmt/steps/report/reportportal.py",
    "tmt/__init__.py",
    "tmt/base.py",
    "tmt/convert.py",
    "tmt/lint.py",
    "tmt/queue.py",
    "tmt/utils/__init__.py",
    "tmt/utils/structured_field.py",
    "tmt/hardware.py",  # pyright does not pick up pint's _typing.py or something :/
]

pythonVersion = "3.12"
pythonPlatform = "Linux"

# Be vewy, vewy stwict, we'we hunting wabbits^Wbugs.
typeCheckingMode = "strict"

# Kicking off with some common issues we put aside for now. We might re-enable
# these checks later, or not, but for now they are not useful.
reportMissingTypeStubs = false  # Stub file not found for "foo.bar"
reportPrivateUsage = false
reportUnknownMemberType = false
reportUnnecessaryCast = false  # Unnecessary "cast" call; type is already...

[tool.ruff]
line-length = 99
src = ["tmt", "tests"]
target-version = "py312"

[tool.ruff.format]
quote-style = "preserve"  # TODO: Convert to a specific quote style

[tool.ruff.lint]
select = [
    "F",  # pyflakes
    "E",  # pycodestyle error
    "W",  # pycodestyle warning
    "I",  # isort
    "N",  # pep8-naming
    "D",    # pydocstyle
    "UP",  # pyupgrade
    "YTT",  # flake8-2020
    "ASYNC",  # flake8-async
    "S",  # flake8-bandit
    "B",  # flake8-bugbear
    "A",  # flake8-builtins
    "COM",  # flake8-commas
    "C4",  # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "T10",  # flake8-debugger
    "EXE",  # flake8-executable
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "LOG",  # flake8-logging
    "G",  # flake8-logging-format
    "PIE",  # flake8-pie
    "PYI",  # flake8-pyi
    "PT",  # flake8-pytest-style
    "Q003",  # avoidable-escaped-quote
    "Q004",  # unnecessary-escaped-quote
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "INT",  # flake8-gettext
    "PGH",  # pygrep-hooks
    "PLC",  # pylint-convention
    "PLE",  # pylint-error
    "PLR",  # pylint-refactor
    "FLY",  # flynt
    "FURB",  # refurb
    "RUF",  # ruff
    "D",    # pydocstyle
    # Override docstring convention
    "D213", # multi-line-summary-second-line
    ]
ignore = [
    "B904",  # Within an `except` clause, raise exceptions with `raise ... from err` or `raise ...
    "COM812",  # Trailing comma missing
    "G004",  # Logging statement uses f-string
    "PIE790",  # Unnecessary `pass` statement
    "PLC1901",  # `{}` can be simplified to `{}` as an empty string is falsey
    "PLE1205",  # Too many arguments for `logging` format string
    "PLR09",  # Too many branches/statements/arguments/returns
    "PLR2004",  # Magic value used in comparison
    "RUF012",  # Mutable class attributes should be annotated with `typing.ClassVar`
    "RUF013",  # PEP 484 prohibits implicit `Optional`
    # flake8-bandit (S) https://docs.astral.sh/ruff/rules/#flake8-bandit-s
    "S101",  # Use of `assert` detected
    "S603",  # `subprocess` call: check for execution of untrusted input
    "S607",  # Starting a process with a partial executable path
    "S105",  # Possible hardcoded password assigned to: "PASS"
    "SIM103",  # Return the condition directly - can hurt readability
    "D200",  # One-line docstring should fit on one line
    "D212",  # Multi-line docstring summary should start at the first line

    # pydocstyle
    # TODO: the permanent list (drop this comment once the temporary list
    # below gets to zero items...)
    "D203",  # 1 blank line required before class docstring
    # TODO: the temporary list - some of these will be enabled in their
    # own patches
    "D100",  # Missing docstring in public module
    "D101",  # Missing docstring in public class
    "D102",  # Missing docstring in public method
    "D103",  # Missing docstring in public function
    "D104",  # Missing docstring in public package
    "D105",  # Missing docstring in magic method
    "D106",  # Missing docstring in public nested class
    "D107",  # Missing docstring in __init__
    "D202",  # No blank lines allowed after function docstring
    "D205",  # 1 blank line required between summary line and description
    "D301",  # Use r""" if any backslashes in a docstring
    "D400",  # First line should end with a period
    "D401",  # First line of docstring should be in imperative mood
    "D415",  # First line should end with a period, question mark, or exclamation point

    # TODO Python 3.12+
    "UP",
    "B905",
    ]

logger-objects = ["tmt.log.Logger"]
typing-modules = ["tmt._compat.typing"]

[tool.ruff.lint.per-file-ignores]
# Less strict security checks in tests
"tests/unit*" = [
    "S604",  # Function call with shell=True parameter identified, security issue
    "S605",  # Starting a process with a shell: seems safe, but may be changed in the future
    "S318",  # Using xml to parse untrusted data is known to be vulnerable to XML attacks
    "S108",  # Probable insecure usage of temporary file or directory: "{}"
    "FLY002",  # Use f-string instead of .join
    ]
# The naming scheme of tmt/_compat will overshadow stdlib modules
"tmt/_compat/pathlib.py" = ["A005"]
"tmt/_compat/typing.py" = ["A005"]
"tmt/_compat/warnings.py" = ["A005"]
# Following files also overshadow stdlib modules
"tmt/queue.py" = ["A005"]
"tmt/steps/report/html.py" = ["A005"]
# The purpose of tmt/_compat is to be used with TID251 (banned imports)
"tmt/_compat/**.py" = ["TID251"]
"docs/conf.py" = ["TID251"]

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = ["tmt.utils.field"]

[tool.ruff.lint.pydocstyle]
# "The PEP 257 convention includes all D errors apart from: D203, D212,
# D213, D214, D215, D404, D405, D406, D407, D408, D409, D410, D411, D413,
# D415, D416, and D417."
#
# See https://docs.astral.sh/ruff/faq/#does-ruff-support-numpy-or-google-style-docstrings for
# the most up-to-date info.
convention = "pep257"

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["help", "format", "input", "filter", "copyright", "max"]

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"typing.TypeAlias".msg = "Use tmt._compat.typing.TypeAlias instead."
"typing_extensions.TypeAlias".msg = "Use tmt._compat.typing.TypeAlias instead."
"typing.Self".msg = "Use tmt._compat.typing.Self instead."
"typing_extensions.Self".msg = "Use tmt._compat.typing.Self instead."
"pathlib.Path".msg = "Use tmt._compat.pathlib.Path instead."
"pathlib.PosixPath".msg = "Use tmt._compat.pathlib.Path instead."
"pydantic".msg = "Use tmt._compat.pydantic instead."
"warnings.deprecated".msg = "Use tmt._compat.warnings.deprecated instead."
"os.path".msg = "Use tmt._compat.pathlib.Path and pathlib instead."
# Banning builtins is not yet supported: https://github.com/astral-sh/ruff/issues/10079
# "builtins.open".msg = "Use Path.{write_text,append_text,read_text,write_bytes,read_bytes} instead."
"dataclasses.dataclass".msg = "Use tmt.container.container instead."
"dataclasses.field".msg = "Use tmt.container.field instead."
"click.style".msg = "Use tmt.log.style instead."

[tool.ruff.lint.flake8-type-checking]
runtime-evaluated-base-classes = ["tmt.config.models.BaseConfig"]

[tool.ruff.lint.isort]
known-first-party = ["tmt"]

[tool.pytest.ini_options]
markers = [
    "containers: tests which need to spawn containers",
    "web: tests which need to access the web"
    ]

[tool.codespell]
ignore-words = "docs/codespell.dic"
exclude-file = "docs/codespell.ignore"
skip = "tests/execute/weird/data/weird.txt,tests/lint/plan/data/invalid_attr.fmf,tests/lint/plan/test.sh"

[tool.djlint]
use_gitignore=true
ignore="H005,H030,H031"
