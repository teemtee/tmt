/dmesg:
    test: /bin/true
    check: dmesg

    /harmless:
        test: bash -c 'sleep 5'

    /harmless2:

    /segfault:
        test: echo Some segfault happened > /dev/kmsg

    /custom-patterns:
        check:
          - how: dmesg
            failure-pattern:
              - 'Hypervisor detected'

    /multiple-reports:
        check:
          - how: dmesg
            result: respect
          - how: dmesg
            result: respect
          - how: dmesg
            result: respect

/avc:
  /checkpoint:
    check:
      - how: avc
        test-method: checkpoint

    /harmless:
      test: /bin/true
      order: 100

    /nasty:
      test: |
        set -x
        systemctl status auditd || /bin/true
        systemctl start auditd
        sleep 10
        sudo bash -c "passwd --help &> /root/passwd.log; \
                      ls -alZ /root/passwd.log; \
                      rm -f /root/passwd.log" || /bin/true

  /timestamp:
    check:
      - how: avc
        test-method: timestamp

    /harmless:
      test: /bin/true
      order: 100

    /nasty:
      test: |
        set -x
        systemctl status auditd || /bin/true
        systemctl start auditd
        sleep 10
        sudo bash -c "passwd --help &> /root/passwd.log; \
                      ls -alZ /root/passwd.log; \
                      rm -f /root/passwd.log" || /bin/true

/coredump:
    check:
      - how: coredump

    /harmless:
        test: /bin/true
        summary: Test coredump check passes with no crashes

    /segfault:
        test: |
            sleep 10 & kill -SIGSEGV %1
        summary: Test coredump check fails with segfault

    /ignore-pattern:
        check:
          - how: coredump
            ignore-pattern:
              - 'Signal:\s+\d+\s+\((SIG)?SEGV\)'
        test: |
            sleep 10 & kill -SIGSEGV %1
        summary: Test coredump check passes with ignored crash pattern

/watchdog/ping:
  require:
    - /usr/bin/uptime

  test: |
    set -x

    export
    uptime

    if [ "$TMT_REBOOT_COUNT" = "1" ]; then exit 0; fi

    # Collect a couple of successful responses
    sysctl net.ipv4.icmp_echo_ignore_all
    sysctl net.ipv6.icmp.echo_ignore_all

    echo "test starts, will sleep for a while"
    sleep 120
    uptime

    # Trigger kernel panic. There should be no development after this line,
    # but to be sure, sleep more.
    echo c > /proc/sysrq-trigger

    # Now wait to be noticed by the watchdog
    sleep 300

  duration: 30m

  check:
    - how: watchdog

      interval: 5
      reboot: true

      # The only viable way to test this with easy-to-setup guests is `virtual` + SSH.
      # Cannot use ping, we'd be pinging our own localhost, and Beaker requires nontrivial
      # setup. The watchdog should detect this & disable the ping probe.
      ping: true

      ssh-ping: true
      ssh-ping-threshold: 3

/internal:
    /pass:
        test: /bin/true
    /timeout:
        test: sleep 3s
        duration: 1s
    /abort:
        test: "echo Start; tmt-abort; echo End"
    /permission:
        test: /dev/null
    /invocation:
        /pidfile:
            test: exit 122
        /restart:
            summary: Test should fail due to exceeded restart count
            test: exit 79
            restart-max-count: 1
            restart-on-exit-code: [79]
    /guest:
        /reboot:
            summary: Test should fail due to reboot timeout
            test: '[ "$TMT_REBOOT_COUNT" == "0" ] && tmt-reboot -t 1 -c reboot || echo'
