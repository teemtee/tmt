story: 'As a user I want to comfortably work with tests'

/ls:
    story: 'List available tests'
    example: tmt test ls
    implemented: /tmt/cli
    tested: /tests/ls
    documented: /docs/examples#explore-tests

/show:
    story: 'Show test metadata'
    example: tmt test show
    implemented: /tmt/cli
    documented: /docs/examples#explore-tests

/lint:
    story: 'Check test against the L1 metadata specification'
    description:
        Verify that test metadata are aligned with the
        specification, e.g. that all required attributes are
        present and that all attributes have correct type.
    example: tmt test lint
    implemented: /tmt/cli
    documented: /docs/examples#lint-tests

/create:
    story: 'Create a new test skeleton'
    description:
        Provide an easy way how to create a new test. Ideally
        with support for multiple test skeletons. Similarly as
        beaker-wizard (which should be obsoleted by this) the
        tool should prompt for required values if not provided
        on the command line.
    example:
        - tmt test create
        - tmt test create /tests/area/feature
        - tmt test create /tests/area/feature --skeleton beakerlib
        - tmt test create /tests/area/feature --duration=1h
    implemented: /tmt/cli
    documented: /docs/examples#create-tests

/convert:
    story: 'Convert old test metadata'
    example: tmt test convert
    implemented: /tmt/convert
    tested: /tests/test_convert
    documented: /docs/examples#convert-tests

/export:
    story: 'I want to export test metadata.'

    /format:
        story: 'I want to export test metadata into given format.'
        example: tmt test export --format yaml
        implemented: /tmt/base

    /nitrate:
        story: 'I want to export test metadata into nitrate.'
        example: tmt test export --nitrate
        description: |
            In order to keep metadata in sync with the old test
            case management system we need to export selected set
            of attributes back to nitrate. The full fmf object
            identifier should be added to the structured field
            under the key ``fmf``. A warning should be added to
            the structured field informing users that the test
            metadata are now maintained in git.

            Below is the list of supported ``fmf`` attributes and
            corresponding nitrate fields:

            * component — components tab
            * contact — default tester
            * description — purpose-file in the structured field
            * duration — estimated time
            * enabled — status
            * environment — arguments
            * path — not synced
            * relevancy — relevancy in the structured field
            * result — not synced
            * summary — description in the structured field
            * tag — tags tab
            * test — not synced
            * tier — tags (e.g. ``1`` synced to the ``Tier1`` tag)

            The following attributes, if present, should be
            exported as well:

            * extra-hardware — hardware in the structured field
            * extra-pepa — pepa in the structured field

            They have the ``extra`` prefix as they are not part of
            the L1 Metadata Specification and are supposed to be
            synced temporarily to keep backward compatibility.

/coverage:
    story: 'Test coverage overview'
    description:
        Show current status of test coverage.
        Alias for /stories/cli/story/coverage/test
    example: tmt test coverage

/filter:
    story: 'Filter available tests'
    example:
        - tmt test ls REGEXP
        - tmt test ls --max-duration=5m
        - tmt test ls --enabled
        - tmt test ls --tier=1
    documented: /docs/examples#filter-tests
