summary: Provision a system for testing

description: |
    Describes what environment is needed for testing and how it
    should be provisioned. There are several provision plugins
    supporting multiple ways to provision the environment for
    testing, for example
    :ref:`/spec/plans/provision/virtual`,
    :ref:`/spec/plans/provision/container`,
    :ref:`/spec/plans/provision/connect` or
    :ref:`/spec/plans/provision/local`.
    See individual plugin documentation for details about
    supported options.

    As part of the provision step it is also possible to specify
    detailed hardware requirements for the testing environment.
    See the :ref:`/spec/hardware` specification section for
    details.

example: |
    # Provision a local virtual machine with the latest Fedora
    provision:
        how: virtual
        image: fedora

/virtual:
    summary: Provision a virtual machine (default)
    description:
        Create a new virtual machine on the localhost using
        testcloud (libvirt). Testcloud takes care of downloading
        an image and making necessary changes to it for optimal
        experience (such as disabling UseDNS and GSSAPI for SSH).
    example: |
        provision:
            how: virtual
            image: fedora
    link:
      - implemented-by: /tmt/steps/provision/testcloud.py

/local:
    summary: Use the localhost for testing
    description:
        Do not provision any system. Tests will be executed
        directly on the localhost. Note that for some actions like
        installing additional packages you need root permission or
        enabled sudo.
    example: |
        provision:
            how: local
    link:
      - implemented-by: /tmt/steps/provision/local.py
      - verified-by: /tests/init/base

/container:
    summary: Provision a container
    description:
        Download (if necessary) and start a new container using
        podman or docker.
    example: |
        provision:
            how: container
            image: fedora:latest
    link:
      - implemented-by: /tmt/steps/provision/podman.py

/openstack:
    summary: Provision a virtual machine in OpenStack
    description:
        Create a virtual machine using OpenStack.
    example: |
        provision:
            how: openstack
            image: f31

/beaker:
    summary: Provision a machine in Beaker
    description:
        Reserve a machine from the Beaker pool.
    example: |
        provision:
            how: beaker
            family: Fedora31
            tag: released

/connect:
    summary: Connect to a provisioned box
    description: |
        Do not provision a new system. Instead, use provided
        authentication data to connect to a running machine.

        guest
            hostname or ip address of the box
        user
            user name to be used to log in, ``root`` by default
        password
            user password to be used to log in
        key
            path to the file with private key
        port
            use specific port to connect to
    link:
      - implemented-by: /tmt/steps/provision/connect.py

    example: |
        provision:
            how: connect
            guest: hostname or ip address
            user: username
            password: password

        provision:
            how: connect
            guest: hostname or ip address
            key: private-key-path


/multihost:
    summary: Multihost testing specification

    description: |
        As a part of the provision step it is possible to request
        multiple guests to be provisioned for testing. Each guest
        has to be assigned a unique ``name`` which is used to
        identify it.

        The optional parameter ``role`` can be used to mark
        related guests so that common actions can be applied to
        all such guests at once. An example role name can be
        `client` or `server` but arbitrary identifier can be used.

        Both `name` and `role` can be used together with the
        ``where`` key to select guests on which the
        :ref:`preparation</spec/plans/prepare/where>`
        tasks should be applied or where the test
        :ref:`execution</spec/plans/execute/where>` should
        take place.

        If guests need to be synchronized during the environment
        preparation and test execution, group them under a common
        dictionary which will ensure they are processed together.

    example: |
        # Request two guests
        provision:
          - name: server
            how: virtual
          - name: client
            how: virtual

        # Assign role to guests
        provision:
          - name: main-server
            role: primary
          - name: backup-one
            role: replica
          - name: backup-two
            role: replica
          - name: tester-one
            role: client
          - name: tester-two
            role: client

        # Synchronize guests using groups
        provision:
          - group: across-arches
            guests:
              - name: client-one
                arch: s390x
              - name: server-one
                arch: ppc64le
          - group: across-distros
            guests:
              - name: client-two
                distro: centos-stream-8
              - name: server-two
                distro: centos-stream-9
