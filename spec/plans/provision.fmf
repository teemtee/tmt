summary: Provision a system for testing

description: |
    Describes what environment is needed for testing and how it
    should be provisioned. Provides a generic and an extensible
    way to write down essential hardware requirements. For example
    one consistent way how to specify "at least 2 GB of RAM" for
    all supported provisioners. Might fail if it cannot provision
    according to the constraints.

example: |
    provision:
        how: virtual
        image: fedora
        memory: 8 GB

/virtual:
    summary: Provision a virtual machine (default)
    description:
        Create a new virtual machine on the localhost using
        testcloud (libvirt). Testcloud takes care of downloading
        an image and making necessary changes to it for optimal
        experience (such as disabling UseDNS and GSSAPI for SSH).
    example: |
        provision:
            how: virtual
            image: fedora
    link:
      - implemented-by: /tmt/steps/provision/testcloud.py

/local:
    summary: Use the localhost for testing
    description:
        Do not provision any system. Tests will be executed
        directly on the localhost. Note that for some actions like
        installing additional packages you need root permission or
        enabled sudo.
    example: |
        provision:
            how: local
    link:
      - implemented-by: /tmt/steps/provision/local.py
      - verified-by: /tests/init/base

/container:
    summary: Provision a container
    description:
        Download (if necessary) and start a new container using
        podman or docker.
    example: |
        provision:
            how: container
            image: fedora:latest
    link:
      - implemented-by: /tmt/steps/provision/podman.py

/openstack:
    summary: Provision a virtual machine in OpenStack
    description:
        Create a virtual machine using OpenStack.
    example: |
        provision:
            how: openstack
            image: f31

/beaker:
    summary: Provision a machine in Beaker
    description:
        Reserve a machine from the Beaker pool.
    example: |
        provision:
            how: beaker
            family: Fedora31
            tag: released

/connect:
    summary: Connect to a provisioned box
    description: |
        Do not provision a new system. Instead, use provided
        authentication data to connect to a running machine.

        guest
            hostname or ip address of the box
        user
            user name to be used to log in, ``root`` by default
        password
            user password to be used to log in
        key
            path to the file with private key
        port
            use specific port to connect to
    link:
      - implemented-by: /tmt/steps/provision/connect.py

    example: |
        provision:
            how: connect
            guest: hostname or ip address
            user: username
            password: password

        provision:
            how: connect
            guest: hostname or ip address
            key: private-key-path


/hardware:
    summary: Hardware specification

    description: |
        As part of the provision step it is possible to specify
        additional requirements for the testing environment.
        Individual requirements are provided as a simple ``key:
        value`` pairs, for example the minimum amount of
        ``memory`` or the related information is grouped under a
        common parent, for example ``cores`` or ``model`` under
        the ``cpu`` key.

        When multiple environment requirements are provided the
        provision implementation should attempt to satisfy all of
        them. It is also possible to write this explicitly using
        the ``and`` operator containing a list of dictionaries
        with individual requirements. When the ``or`` operator is
        used, any of the alternatives provided in the list should
        be sufficient.

        Regular expressions can be used for selected fields such
        as the ``model-name``. Please note, that the full extent
        of regular expressions might not be supported across all
        provision implementations. The ``.*`` notation, however,
        should be supported everywhere.

        The `pint`__ library is used for processing various units,
        both decimal and binary prefixes can be used::

            1 MB = 1 000 000 B
            1 MiB = 1 048 576 B

        __ https://pint.readthedocs.io/

        .. note::

            Although the hardware specification is not implemented
            yet we do not expect any significant changes to the
            currently proposed format.

    example:
      - |
        # Here's a full provision step example
        provision:
            how: virtual
            image: fedora-35
            hardware:
                arch: x86_64
                memory: 8 GB
      - |
        # Basic key-value format used to specify the memory size
        memory: 8 GB

      - |
        # Architecture (any of well-known short architecture names,
        # for example aarch64, i386, ppc64, ppc64le, s390x, x86_64)
        arch: x86_64

      - |
        # Processor-related stuff grouped together
        cpu:
            # The total number of various CPU components in the system.
            socket: 1
            cores: 4
            threads: 8

            # Ther number of various CPU components per their parent.
            cores-per-socket: 4
            threads-per-core: 2

            # The total number of logical CPUs.
            processors: 8

            # CPU model name. Usually reported as such by /proc/cpuinfo or lscpu.
            model-name: Intel(R) Core(TM) i7-10610U CPU @ 1.80GHz
            # CPU model number.
            model: 142
            # CPU family name.
            family-name: Comet Lake
            # CPU family number.
            family: 6

      - |
        # Disk group used to allow possible future extensions
        disk:
          - size: 500 GB

        # Multiple disks can be requested as well
        disk:
          - size: '>= 2 GB'
          - size: '>= 20 GB'

      - |
        # Optional operators at the start of the value
        memory: '> 8 GB'
        memory: '>= 8 GB'
        memory: '< 8 GB'
        memory: '<= 8 GB'

      - |
        # By default exact value expected, these are equivalent:
        cpu:
            model: 37
        cpu:
            model: '= 37'

      - |
        # Enable regular expression search
        cpu:
            model-name: =~ .*AMD.*

      - |
        # Network interface
        network:
          - type: eth
            vendor-name: =~ Broadcom.*
            device-name: =~ NetXtreme II BCM.*

      - |
        # Features related to virtualization
        virtualization:
            is-virtualized: true
            is-supported: false
            hypervisor: kvm

      - |
        # Features related to machine boot modes
        boot:
            method: bios

        boot:
            method: uefi

      - |
        # Choose machine with given hostname
        hostname: kvm-01.lab.us-east-2.company.com

        # Hostname matching a regular expression
        hostname: "~ kvm-01.*"

        # Hostname not matching a regular expression
        hostname: "!~ kvm-01.*"

      - |
        # Using advanced logic operators
        and:
          - cpu:
                family: 15
          - or:
              - cpu:
                    model: 65
              - cpu:
                    model: 67
              - cpu:
                    model: 69

/multihost:
    summary: Multihost testing specification

    description: |
        As a part of the provision step it is possible to request
        multiple guests to be provisioned for testing. Each guest
        has to be assigned a unique ``name`` which is used to
        identify it.

        The optional parameter ``role`` can be used to mark
        related guests so that common actions can be applied to
        all such guests at once. An example role name can be
        `client` or `server` but arbitrary identifier can be used.

        Both `name` and `role` can be used together with the
        ``where`` key to select guests on which the
        :ref:`preparation</spec/plans/prepare/where>`
        tasks should be applied or where the test
        :ref:`execution</spec/plans/execute/where>` should
        take place.

        If guests need to be synchronized during the environment
        preparation and test execution, group them under a common
        dictionary which will ensure they are processed together.

    example: |
        # Request two guests
        provision:
          - name: server
            how: virtual
          - name: client
            how: virtual

        # Assign role to guests
        provision:
          - name: main-server
            role: primary
          - name: backup-one
            role: replica
          - name: backup-two
            role: replica
          - name: tester-one
            role: client
          - name: tester-two
            role: client

        # Synchronize guests using groups
        provision:
          - group: across-arches
            guests:
              - name: client-one
                arch: s390x
              - name: server-one
                arch: ppc64le
          - group: across-distros
            guests:
              - name: client-two
                distro: centos-stream-8
              - name: server-two
                distro: centos-stream-9
