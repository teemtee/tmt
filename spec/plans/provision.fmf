summary: Provision a system for testing

description: |
    Describes what environment is needed for testing and how it
    should be provisioned. Provides a generic and an extensible
    way to write down essential hardware requirements. For example
    one consistent way how to specify "at least 2 GB of RAM" for
    all supported provisioners. Might fail if it cannot provision
    according to the constraints.

example: |
    provision:
        how: virtual
        image: fedora
        memory: 8 GB

/virtual:
    summary: Provision a virtual machine (default)
    description:
        Create a new virtual machine on the localhost using
        libvirt or another provider which is enabled in vagrant.
    example: |
        provision:
            how: virtual
            image: fedora/31-cloud-base
    link:
      - implemented-by: /tmt/steps/provision/testcloud.py

/local:
    summary: Use the localhost for testing
    description:
        Do not provision any system. Tests will be executed
        directly on the localhost. Note that for some actions like
        installing additional packages you need root permission or
        enabled sudo.
    example: |
        provision:
            how: local
    link:
      - implemented-by: /tmt/steps/provision/local.py
      - verified-by: /tests/init/base

/container:
    summary: Provision a container
    description:
        Download (if necessary) and start a new container using
        podman or docker.
    example: |
        provision:
            how: container
            image: fedora:latest
    link:
      - implemented-by: /tmt/steps/provision/podman.py

/openstack:
    summary: Provision a virtual machine in OpenStack
    description:
        Create a virtual machine using OpenStack.
    example: |
        provision:
            how: openstack
            image: f31

/beaker:
    summary: Provision a machine in Beaker
    description:
        Reserve a machine from the Beaker pool.
    example: |
        provision:
            how: beaker
            family: Fedora31
            tag: released

/connect:
    summary: Connect to a provisioned box
    description: |
        Do not provision a new system. Instead, use provided
        authentication data to connect to a running machine.

        guest
            hostname or ip address of the box
        user
            user name to be used to log in, ``root`` by default
        password
            user password to be used to log in
        key
            path to the file with private key
        port
            use specific port to connect to
    link:
      - implemented-by: /tmt/steps/provision/connect.py

    example: |
        provision:
            how: connect
            guest: hostname or ip address
            user: username
            password: password

        provision:
            how: connect
            guest: hostname or ip address
            key: private-key-path

/minute:
    summary:
        Provision a virtual machine using the 1minutetip OpenStack
        backend
    description: |
        First check whether a prereserved machine exists using the
        1minutetip backend. Use it, if it exists, otherwise boot a
        new machine using the OpenStack backend.

        Note that this internal-only plugin is now available in the
        ``tmt-redhat-provision-minute`` package which you can
        install from the internal copr repository.
    example: |
        provision:
            how: minute
            image: 1MT-Fedora-32
            flavor: m1.large
    link:
      - implemented-by: /tmt/steps/provision/minute_obsolete.py

/hardware:
    summary: Hardware specification

    description: |
        As part of the provision step it is possible to specify
        additional requirements for the testing environment.
        Individual requirements are provided as a simple ``key:
        value`` pairs, for example the minimum amount of
        ``memory`` or the related information is grouped under a
        common parent, for example ``cores`` or ``model`` under
        the ``cpu`` key.

        When multiple environment requirements are provided the
        provision implementation should attempt to satisfy all of
        them. It is also possible to write this explicitly using
        the ``and`` operator containing a list of dictionaries
        with individual requirements. When the ``or`` operator is
        used, any of the alternatives provided in the list should
        be sufficient.

        Regular expressions can be used for selected fields such
        as the ``model_name``. Please note, that the full extent
        of regular expressions might not be supported across all
        provision implementations. The ``.*`` notation, however,
        should be supported everywhere.

        The `pint`__ library is used for processing various units,
        both decimal and binary prefixes can be used::

            1 MB = 1 000 000 B
            1 MiB = 1 048 576 B

        __ https://pint.readthedocs.io/

        .. note::

            Although the hardware specification is not implemented
            yet we do not expect any significant changes to the
            currently proposed format.

    example: |
        # Basic key-value format used to specify the memory size
        memory: 8 GB

        # Processor-related stuff grouped together
        cpu:
            processors: 2
            cores: 16
            model: 37

        # Disk group used to allow possible future extensions
        disk:
            space: 500 GB

        # Optional operators at the start of the value
        memory: '> 8 GB'
        memory: '>= 8 GB'
        memory: '< 8 GB'
        memory: '<= 8 GB'

        # By default exact value expected, these are equivalent:
        cpu:
            model: 37
        cpu:
            model: '= 37'

        # Enable regular expression search
        cpu:
            model_name: =~ .*AMD.*

        # Using advanced logic operators
        and:
          - cpu:
                family: 15
          - or:
              - cpu:
                    model: 65
              - cpu:
                    model: 67
              - cpu:
                    model: 69
