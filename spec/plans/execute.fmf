summary: Define how tests should be executed

description: |
    Execute discovered tests in the provisioned environment using
    selected test executor. By default tests are executed using
    the internal ``tmt`` executor which allows to show detailed
    progress of the testing and supports interactive debugging.

    This is a **required** attribute. Each plan has to define this
    step.

    For each test, a separate directory is created for storing
    artifacts related to the test execution. Its path is
    constructed from the test name and it's stored under the
    ``execute/data`` directory. It contains a ``metadata.yaml``
    file with the aggregated L1 metadata which can be used by the
    test :ref:`/spec/tests/framework`. In addition to supported
    :ref:`/spec/tests` attributes it also contains fmf ``name`` of
    the test.

    In each plan, the execute step must produce a ``results.yaml`` file
    with results for executed tests. The format of the file is described
    at :ref:`/spec/results`.


/isolate:
    summary: Run tests in an isolated environment
    description:
        Optional boolean attribute `isolate` can be used to
        request a clean test environment for each test.
    example: |
        execute:
            how: tmt
            isolate: true

/exit-first:
    summary: Stop execution after the first test failure or error
    story:
        As a user I want to avoid waiting for all discovered
        tests to finish if one of them fails.
    description:
        Optional boolean attribute `exit-first` can be used to
        make the executor stop executing tests once a test
        failure or error is encountered.
    example: |
        execute:
            how: tmt
            exit-first: true
    link:
      - implemented-by: /tmt/steps/execute/internal.py
      - verified-by: /tests/execute/exit-first

/script:
    summary: Execute shell scripts
    story: As a user I want to easily run shell script as a test.

    example:
      - |
        # Run a simple smoke test
        execute:
            how: tmt
            script: tmt --help
      - |
        # Modify the default maximum duration
        execute:
            how: tmt
            script: a-long-test-suite
            duration: 3h
    link:
      - implemented-by: /tmt/steps/execute/internal.py

    /simple:
        summary: Simple use case should be super simple to write
        title: The simplest usage
        description: |
            As the `how` keyword can be omitted when using the
            default executor you can just define the shell
            `script` to be run. This is how a minimal smoke test
            configuration for the `tmt` command can look like:
        example: |
            execute:
                script: tmt --help

    /several:
        summary: Multiple shell commands
        title: Multiple commands
        description:
            You can also include several commands as a list.
            Executor will run commands one-by-one and check exit
            code of each.
        example: |
            execute:
                script:
                  - dnf -y install httpd curl
                  - systemctl start httpd
                  - echo foo > /var/www/html/index.html
                  - curl http://localhost/ | grep foo

    /multi:
        summary: Multi-line shell script
        title: Multi-line script
        description:
            Providing a multi-line shell script is also supported.
            Note that the first command with non-zero exit code
            will finish the execution. See the
            :ref:`/spec/tests/test` key for details about default
            shell options.
        example: |
            execute:
                script: |
                    dnf -y install httpd curl
                    systemctl start httpd
                    echo foo > /var/www/html/index.html
                    curl http://localhost/ | grep foo
