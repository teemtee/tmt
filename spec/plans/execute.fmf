summary: Define how tests should be executed

description: |
    Execute discovered tests in the provisioned environment using
    selected test executor. By default tests are executed using
    the internal ``tmt`` executor which allows to show detailed
    progress of the testing and supports interactive debugging.

    This is a **required** attribute. Each plan has to define this
    step.

    For each test, a separate directory is created for storing
    artifacts related to the test execution. Its path is
    constructed from the test name and it's stored under the
    ``execute/data`` directory. It contains a ``metadata.yaml``
    file with the aggregated L1 metadata which can be used by the
    test :ref:`/spec/tests/framework`. In addition to supported
    :ref:`/spec/tests` attributes it also contains fmf ``name`` of
    the test.

    For each ``plan`` the execute step should produce a
    ``results.yaml`` file with the list of results for each test
    in the following format::

        /test/one:
            result: OUTCOME
            log: PATH

        /test/two:
            result: OUTCOME
            log: PATH
            duration: DURATION

    Where ``OUTCOME`` is the result of the test execution. It can
    have the following values:

        pass
            Test execution successfully finished and passed.
        info
            Test finished but only produced an informational
            message. Represents a soft pass, used for skipped
            tests and for tests with the :ref:`/spec/tests/result`
            attribute set to *ignore*. Automation should treat
            this as a passed test.
        warn
            A problem appeared during test execution which does
            not affect test results but might be worth checking
            and fixing. For example test cleanup phase failed.
            Automation should treat this as a failed test.
        error
            Undefined problem encountered during test execution.
            Human inspection is needed to investigate whether it
            was a test bug, infrastructure error or a real test
            failure. Automation should treat it as a failed test.
        fail
            Test execution successfully finished and failed.

    The ``PATH`` is the test log output path, relative to the
    execute step working directory. It can be a single string
    or a list of strings when multiple log files available, in
    which case the first log will be considered as the main one
    (e.g. presented to the user for inspection).

    The ``DURATION`` is an optional section stating how long did
    the test run. Its value is in the ``hh:mm:ss`` format.

/isolate:
    summary: Run tests in an isolated environment
    description:
        Optional boolean attribute `isolate` can be used to
        request a clean test environment for each test.
    example: |
        execute:
            how: tmt
            isolate: true

/tmt:
    summary: Internal test executor
    story: As a user I want to execute tests directly from tmt.
    description:
        The internal ``tmt`` executor runs tests in the
        provisioned environment one by one directly from the
        tmt code which allows features such as showing live
        :ref:`/stories/cli/steps/execute/progress` or the
        :ref:`/stories/cli/steps/execute/interactive` session .
        This is the default execute step implementation.
    example: |
        execute:
            how: tmt
    link:
      - implemented-by: /tmt/steps/execute/internal.py
      - verified-by: /tests/execute/framework

/detach:
    summary: Detached test executor
    story: As a user I want to execute tests in a detached way.
    description:
        The ``detach`` executor runs tests in one batch using a
        shell script directly executed on the provisioned guest.
        This can be useful when the connection to the guest is
        slow or the test execution takes a long time and you want
        to disconnect your laptop while keeping tests running in
        the background.
    example: |
        execute:
            how: detach
    link:
      - implemented-by: /tmt/steps/execute/detach.py
      - verified-by: /tests/execute/framework

/script:
    summary: Execute shell scripts
    story: As a user I want to easily run shell script as a test.
    description:
        Execute arbitratry shell commands and check their exit
        code which is used as a test result.

        The default :ref:`/spec/tests/duration` for tests defined
        directly under the execute step is ``1h``. Use the
        ``duration`` attribute to modify the default limit.
    example: |
        execute:
            how: tmt
            script: tmt --help

        execute:
            how: tmt
            script: a-long-test-suite
            duration: 3h
    link:
      - implemented-by: /tmt/steps/execute/internal.py
      - implemented-by: /tmt/steps/execute/detach.py

    /simple:
        summary: Simple use case should be super simple to write
        title: The simplest usage
        description: |
            As the `how` keyword can be omitted when using the
            default executor you can just define the shell
            `script` to be run. This is how a minimal smoke test
            configuration for the `tmt` command can look like:
        example: |
            execute:
                script: tmt --help

    /several:
        summary: Multiple shell commands
        title: Multiple commands
        description:
            You can also include several commands as a list.
            Executor will run commands one-by-one and check exit
            code of each.
        example: |
            execute:
                script:
                    - dnf -y install httpd curl
                    - systemctl start httpd
                    - echo foo > /var/www/html/index.html
                    - curl http://localhost/ | grep foo

    /multi:
        summary: Multi-line shell script
        title: Multi-line script
        description:
            Providing a multi-line shell script is also supported.
            In that case executor will store given script into a
            file and execute.
        example: |
            execute:
                script: |
                    dnf -y install httpd curl
                    systemctl start httpd
                    echo foo > /var/www/html/index.html
                    curl http://localhost/ | grep foo
