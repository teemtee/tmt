summary: Finishing tasks

description:
    Additional actions to be performed after the test execution
    has been completed.  Counterpart of the ``prepare`` step
    useful for various cleanup actions. Use the
    :ref:`/spec/core/order` attribute to select in which order
    finishing tasks should happen if there are multiple configs.
    Default order is ``50``.

example: |
    finish:
        how: shell
        script: upload-logs.sh

/shell:
    summary:
        Perform finishing tasks using shell (bash) scripts
    description:
        Execute arbitrary shell commands to finish the testing.

        Default shell options are applied to the script, see the
        :ref:`/spec/tests/test` key specification for more
        details.

    example: |
        finish:
            how: shell
            script:
            - upload-logs.sh || true
            - rm -rf /tmp/temporary-files
    link:
      - implemented-by: /tmt/steps/finish/shell.py

/ansible:
    summary:
        Perform finishing tasks using ansible
    description: |
        One or more playbooks can be provided as a list under the
        ``playbook`` attribute.  Each of them will be applied
        using ``ansible-playbook`` in the given order. The path
        must be relative to the metadata tree root.

        Remote playbooks can be referenced as well as the local ones,
        and both kinds can be used at the same time.

    example: |
        finish:
            how: ansible
            playbook:
                - playbooks/common.yml
                - playbooks/os/rhel7.yml
                - https://foo.bar/rhel7-final-touches.yml
    link:
      - implemented-by: /tmt/steps/finish/ansible.py

/where:
    summary: Perform finishing tasks on selected guests
    description: |
        In the :ref:`/spec/plans/provision/multihost` scenarios it
        is often necessary to perform different preparation tasks
        on individual guests. The ``where`` key allows to select
        guests where the finishing tasks should be applied by
        providing their ``name`` or the ``role`` they play in the
        scenario. Use a list to specify multiple names or roles.
        By default, when the ``where`` key is not defined,
        finishing tasks are performed on all provisioned guests.
    example: |
        # Stop Apache on the server
        prepare:
          - how: shell
            script: systemctl stop httpd
            where: server
    link:
      - implemented-by: /tmt/steps
      - documented-by: /docs/guide.rst
