summary: Discover tests relevant for execution

description: |
    Gather information about tests which are supposed to be run.
    Provide method ``tests()`` returning a list of discovered
    tests and ``requires()`` returning a list of all required
    packages aggregated from the `require`_ attribute of the
    individual test metadata.

    .. _require: https://tmt.readthedocs.io/en/latest/spec/tests.html#require

    Store the list of aggregated tests with their corresponding
    metadata in the ``tests.yaml`` file. The format must be a
    list of dictionaries structured in the following way:

    .. code-block:: yaml

        - name: /test/one
          summary: Short test summary.
          description: Long test description.
          contact: Petr Šplíchal <psplicha@redhat.com>
          component: [tmt]
          test: tmt --help
          path: /test/path/
          require: [package1, package2]
          environment:
              key1: value1
              key2: value2
              key3: value3
          duration: 5m
          enabled: true
          result: respect
          tag: [tag]
          tier: 1
          serial-number: 1

        - name: /test/two
          summary: Short test summary.
          description: Long test description.
          ...

/dist-git-source:
    summary: Download rpm sources for dist-git repositories
    description: |
        Downloads the source files specified in the ``sources``
        file of a DistGit (Fedora, CentOS) repository.  Plan using
        the option has to be defined in a DistGit repository or
        the ``url`` option needs to point to the root of such
        repository.

        All source files are available for further use in the
        directory provided in the ``TMT_SOURCE_DIR`` variable.

        Patches are applied by ``rpm-build -bp`` command which
        runs in ``prepare`` step on the provisioned guest, with
        order ``60``. All created files and directories by this command
        are directly in ``TMT_SOURCE_DIR``.

        The :ref:`/plugins/discover/fmf` plugin supports
        additional dist-git options, see its documentation for
        details.

        .. note::

            In order to discover which tests would be executed,
            without actually running them, it is necessary to
            enable the `provision` and `prepare` steps as well:

            .. code-block::

                tmt run -v discover provision prepare finish

    example:
      - |
        # Download & extract sources from another repo, print
        # single file as a test
        discover:
            how: shell
            url: https://src.fedoraproject.org/rpms/tmt
            dist-git-source: true
            tests:
              - name: /print/pyproject
                test: cat $TMT_SOURCE_DIR/tmt-*/pyproject.toml
      - |
        # Just download sources, test is responsible for rpmbuild
        # and running tests
        discover:
            how: shell
            dist-git-source: true
            dist-git-download-only: true
            tests:
              - name: /unit
                test: >
                    rpmbuild -bp
                        --define "_sourcedir $TMT_SOURCE_DIR"
                        --define "_builddir $TMT_SOURCE_DIR/BUILD"
                        $TMT_SOURCE_DIR/*.spec &&
                    cd $TMT_SOURCE_DIR/BUILD/* &&
                    make test
                require:
                  - rpm-build

    link:
      - implemented-by: /tmt/steps/discover/fmf.py
      - implemented-by: /tmt/steps/discover/shell.py


/where:
    summary: Execute tests on selected guests
    description: |
        In the :ref:`/spec/plans/provision/multihost` scenarios it
        is often necessary to execute test code on selected guests
        only or execute different test code on individual guests.
        The ``where`` key allows to select guests where the tests
        should be executed by providing their ``name`` or the
        ``role`` they play in the scenario. Use a list to specify
        multiple names or roles. By default, when the ``where`` key
        is not defined, tests are executed on all provisioned
        guests.

        There is also an alternative to the syntax using a ``where``
        dictionary encapsulating the ``discover`` config under keys
        corresponding to guest names or roles. This can result in
        much more concise config especially when defining several
        shell scripts for each guest or role.

    example:
      - |
        # Run different script for each guest or role
        discover:
            how: shell
            tests:
              - name: run-the-client-code
                test: client.py
                where: client
              - name: run-the-server-code
                test: server.py
                where: server

      - |
        # Filter different set of tests for each guest or role
        discover:
          - how: fmf
            filter: tag:client-tests
            where: client
          - how: fmf
            filter: tag:server-tests
            where: server

      - |
        # Alternative syntax using the 'where' dictionary
        # encapsulating for tests defined by fmf
        discover:
            where:
                client:
                  - how: fmf
                    filter: tag:client-tests
                server:
                  - how: fmf
                    filter: tag:server-tests

      - |
        # Alternative syntax using the 'where' dictionary
        # encapsulating for shell script tests
        discover:
            where:
                server:
                    how: shell
                    tests:
                      - test: first server script
                      - test: second server script
                      - test: third server script
                client:
                    how: shell
                    tests:
                      - test: first client script
                      - test: second client script
                      - test: third client script
    link:
      - implemented-by: /tmt/steps
      - verified-by: /tests/multihost/complete
      - verified-by: /tests/multihost/web
      - documented-by: /docs/guide.rst#multihost-testing

/when:
    summary: Conditional step configuration
    description: |
        Using the ``when`` key makes it easier to restrict a step configuration
        to run only if any of the specified rules matches.
        The syntax is the same as in ``adjust`` and :ref:`/spec/context`.

        Values can be single string with the rule or list of rules.
    example: |
        discover:
          - name: Private tests, applicable only for RHEL
            when: distro == rhel
            how: fmf
            url: https://secret
          - name: Public tests
            how: fmf
            url: https://public
          - name: Just a demo of more rules in the 'when' key
            how: shell
            script: ./something.sh
            when:
            - initiator == konflux && distro == fedora
            - initiator == human && distro == fedora
    link:
      - implemented-by: /tmt/steps
      - verified-by: /tests/steps/when
      - documented-by: /docs/guide.rst
