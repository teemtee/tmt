summary: Prepare the environment for testing

description: |
    The ``prepare`` step is used to define how the guest
    environment should be prepared so that the tests can be
    successfully executed.

    The :ref:`/spec/plans/prepare/install` plugin provides an easy
    way to install required or recommended packages from disk and
    from the official distribution or copr repositories. Use the
    :ref:`/spec/plans/prepare/ansible` plugin for applying custom
    playbooks or execute :ref:`/spec/plans/prepare/shell` scripts
    to perform arbitrary preparation tasks.

    Use the ``order`` attribute to select in which order the
    preparation should happen if there are multiple configs.
    The following are predefined ``order`` values of various
    preparations by tmt:

      30
          Installation of essential plugin and check requirements.

      50
          The default order of any object.

      70
          Installation of packages :ref:`required</spec/tests/require>` by tests.

      75
          Installation of packages :ref:`recommended</spec/tests/recommend>` by tests.

      .. note::

         Individual plugins may define their own special ``order`` values,
         and you shall find the relevant information in :ref:`plugins`
         documentation.

    .. note::

        If you want to use the ``prepare`` step to generate data
        files needed for testing during the ``execute`` step,
        move or copy them into ``${TMT_PLAN_DATA}`` directory. Only
        files in this directory are guaranteed to be preserved.

example: |
    # Install fresh packages from a custom copr repository
    prepare:
      - how: install
        copr: psss/tmt
        package: tmt+all

    # Install required packages and start the service
    prepare:
      - name: packages
        how: install
        package: [httpd, curl]
      - name: service
        how: shell
        script: systemctl start httpd

/shell:
    summary:
        Prepare system using shell (bash) commands

    example: |
        prepare:
            how: shell
            script: dnf install -y httpd
    link:
      - implemented-by: /tmt/steps/provision

/ansible:
    summary:
        Apply ansible playbook to get the desired final state.
    description: |
        One or more playbooks can be provided as a list under the
        ``playbook`` attribute.  Each of them will be applied
        using ``ansible-playbook`` in the given order. The path
        must be relative to the metadata tree root.

        Use ``extra-args`` attribute to enable optional arguments for
        ``ansible-playbook``.

        Remote playbooks can be referenced as well as the local ones,
        and both kinds can be used at the same time.

        .. note::

            Depending on the specific setup of the test runner,
            there might be limitations affecting which playbooks
            can be used, for example the list of available ansible
            collections. See the :ref:`test-runner` section for
            details.

    example: |
        prepare:
            how: ansible
            playbook:
                - playbooks/common.yml
                - playbooks/os/rhel7.yml
                - https://foo.bar/rhel7-final-touches.yml
            extra-args: '-vvv'
    link:
      - implemented-by: /tmt/steps/provision
      - verified-by: /tests/prepare/ansible

/feature:
    summary:
        Easily enable and disable common features
    example: |
        prepare:
            how: feature
            epel: enabled
    link:
      - implemented-by: /tmt/steps/prepare/feature
      - verified-by: /tests/prepare/feature

/install:
    summary:
        Install packages on the guest

    link:
      - implemented-by: /tmt/steps/provision
      - verified-by: /tests/prepare/install

/where:
    summary: Apply preparation on selected guests
    description: |
        In the :ref:`/spec/plans/provision/multihost` scenarios it
        is often necessary to perform different preparation tasks on
        individual guests. The ``where`` key allows to select guests
        where the preparation should be applied by providing their
        ``name`` or the ``role`` they play in the scenario. Use a
        list to specify multiple names or roles. By default, when
        the ``where`` key is not defined, preparation is done on all
        provisioned guests.
    example: |
        # Start Apache on the server
        prepare:
          - how: shell
            script: systemctl start httpd
            where: server

        # Apply common setup on the primary server and all replicas
        prepare:
          - how: ansible
            playbook: common.yaml
            where: [primary, replica]
    link:
      - implemented-by: /tmt/steps
      - verified-by: /tests/multihost/complete
      - verified-by: /tests/multihost/web
      - verified-by: /tests/multihost/corner-cases
      - documented-by: /docs/guide.rst

/when:
    summary: Conditional step configuration
    description: |
        Using the ``when`` key makes it easier to restrict a step configuration
        to run only if any of the specified rules matches.
        The syntax is the same as in ``adjust`` and :ref:`/spec/context`.

        Values can be single string with the rule or list of rules.
    example: |
        prepare:
          - name: Prepare config to run only on Fedora
            when: distro == fedora
            how: shell
            script: ./fedora_specific.
          - name: Runs always
            how: shell
            script: ./setup.sh
          - name: Just a demo of more rules in the 'when' key
            how: shell
            script: ./something.sh
            when:
            - initiator == konflux && distro == fedora
            - initiator == human && distro == fedora
    link:
      - implemented-by: /tmt/steps
      - verified-by: /tests/steps/when
      - documented-by: /docs/guide.rst
