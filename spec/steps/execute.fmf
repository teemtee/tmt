summary: Define how tests should be executed

description: |
    Execute discovered tests on provisioned boxes using provided
    test framework with optional support for parallelization. By
    default tests are executed as ``shell`` scripts. This is a
    **required** attribute. Each plan has to define this step.

    For each ``plan`` the execute step should produce a
    ``results.yaml`` file with the list of results for each test
    in the following format::

        /test/one:
            result: TEST_RESULT
            log: PATH

        /test/two:
            result: TEST_RESULT
            log: PATH

    Where ``TEST_RESULT`` is the outcome of the test. It can have
    these values:

        * info - test finished and produced only information
          message
        * passed - test finished and passed
        * failed - test finished and failed
        * error - a problem encountered during test execution,
          treated as failed

    Where ``PATH`` is the test log output path, relative to the
    execute step plan run directory.

example: |
    execute:
        how: beakerlib

/isolate:
    summary: Run tests in an isolated environment
    description:
        Optional boolean attribute `isolate` can be used to
        request a clean test environment for each test.
    example: |
        execute:
            how: beakerlib
            isolate: true

/avc_check:
    summary: Check for SELinux messages, default: true
    description:
        Optional boolean attribute `avc_check` can be used to
        disable check for SELinux messages.
    example: |
        execute:
            how: beakerlib
            avc_check: false

/plugins:
    summary: Additional plugin to be used
    description:
        Names of the plugins to be run during test execution
        and optionally their configuration as key: value pairs
    example: |
        executute:
            how: beakerlib
            plugins:
                scl_enable:
                    enable: rh-python27 httpd24

/shell:
    story: As a user I want to easily run shell script as a test.
    summary: Execute shell scripts
    description:
        Execute arbitratry shell commands and check their exit
        code which is used as a test result. This is the default
        execute step implementation.
    example: |
        execute:
            how: shell
            script: tmt --help

    /default:
        summary: Shell is the default executor
        description: |
            The `shell` implementation is the default one.  Thus
            you can omit the `how` keyword and just define the
            `script` to be run.  This is how a minimal smoke test
            for the `tmt` command line can look like:
        example: |
            execute:
                script: tmt --help
        implemented: /tmt/steps/execute/shell.py

    /multi:
        summary: Multiple shell commands
        description:
            You can also include several commands as a list.
            Executor will run commands one-by-one and check exit
            code of each.
        example: |
            execute:
                script:
                    - dnf -y install httpd curl
                    - systemctl start httpd
                    - echo foo > /var/www/html/index.html
                    - curl http://localhost/ | grep foo
        implemented: /tmt/steps/execute/shell.py

    /script:
        summary: Multi-line shell script
        description:
            Providing a multi-line shell script is also
            supported. In that case executor will store given
            script into a file and execute.
        example: |
            execute:
                script: |
                    dnf -y install httpd curl
                    systemctl start httpd
                    echo foo > /var/www/html/index.html
                    curl http://localhost/ | grep foo

/beakerlib:
    story: As a user I want to easily run beakerlib tests.
    summary: Execute beakerlib tests
    description:
        Run tests using the beakerlib shell-level integration
        testing library. Check the exit code to ensure tests have
        been executed successfully and the journal for test
        results.
    implemented: /tmt/steps/execute/beakerlib.py
